// #include "macros/attribute.h"
#pragma once

// Сообщить компилятору, что структура должна быть максимально упакована,
// никаких лишних байтов на выравнивание добавляться не должно.
// Необходимо для экономии памяти.
#define PACKED         __attribute__((packed))

// Сообщить компилятору, что функция не возвращает управление вызывающему коду.
#define NORET          __attribute__((noreturn))

// Сообщить компилятору, что функция без параметров, пролога,
// эпилога и возвращаемого значения.
#define NAKED          __attribute__((naked))

// Сообщить компилятору, что функция часто вызывается.
#define HOT            __attribute__((hot))

// Сообщить компилятору, что функция редко вызывается.
#define COLD           __attribute__((cold))

// Сообщить компилятору, что функция где-то используется.
// Иногда функция, которая используется только из ассемблерной вставки,
// компилятором может быть удалена за ненадобностью, потому что компилятор
// не понимает, что функция все же нужна. Этот макрос заставляет его
// сохранить функцию в собранном бинарнике, чтобы ее потом нашел линковщик.
#define USED           __attribute__((used))

// Сообщить компилятору, что функция представляет из себя задачу
// операционной системы. Эта функция не сохраняет значения некоторых
// регистров, но при этом безопасна для прерываний.
#define OS             __attribute__((OS_task))

// Сообщить компилятору, что функция представляет из себя главную функцию
// операционной системы. Эта функция не сохраняет значения некоторых
// регистров и небезопасна для прерываний.
#define MAIN           __attribute__((OS_main))

// Использование атрибута weak для объекта при его публичном определении
// делает это определение "слабым", которое можно переопределить.
#define WEAK           __attribute__((weak))

// Принудительно сделать inline
#define INLINE         __attribute__ ((always_inline)) inline

// Попытаться избежать inline вставок
#define NOINLINE       __attribute__ ((noinline))

// Функция не используют никаких значений, кроме своих аргументов, и не имеет эффекта, кроме возвращаемого значения.
// Такая функция может быть объектом исключения общих подвыражений и оптимизации циклов аналогично арифметической операции.
// Такую функцию следует объявить с атрибутом const.
// Функцию безопасно вызывать меньшее количество раз, чем сказано в программе. 
#define CONST          __attribute__ ((const))

// MIK32 AMUR

// Поместить функцию в оперативную память
#define RAM            __attribute__((section(".ram_text")))

// Обработчик прерывания
#define ISR            __attribute__((used, interrupt, section(".trap_text")))
